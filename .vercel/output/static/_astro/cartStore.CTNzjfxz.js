let a=[],s=0;const u=4;let d=t=>{let o=[],e={get(){return e.lc||e.listen(()=>{})(),e.value},lc:0,listen(n){return e.lc=o.push(n),()=>{for(let i=s+u;i<a.length;)a[i]===n?a.splice(i,u):i+=u;let r=o.indexOf(n);~r&&(o.splice(r,1),--e.lc)}},notify(n,r){let i=!a.length;for(let g of o)a.push(g,e.value,n,r);if(i){for(s=0;s<a.length;s+=u)a[s](a[s+1],a[s+2],a[s+3]);a.length=0}},off(){},set(n){let r=e.value;r!==n&&(e.value=n,e.notify(r))},subscribe(n){let r=e.listen(n);return n(e.value),r},value:t};return e},p=(t={})=>{let o=d(t);return o.setKey=function(e,n){let r=o.value;typeof n>"u"&&e in o.value?(o.value={...o.value},delete o.value[e],o.notify(r,e)):o.value[e]!==n&&(o.value={...o.value,[e]:n},o.notify(r,e))},o};const c=p({}),f="parfum_cart";function y(){if(typeof window>"u"||typeof localStorage>"u"){console.warn("localStorage not available, using empty cart"),c.set({});return}try{const t=localStorage.getItem(f);if(t){const o=JSON.parse(t);typeof o=="object"&&o!==null?(c.set(o),console.log("Cart loaded from localStorage:",o)):(console.warn("Invalid cart data in localStorage, initializing empty cart"),c.set({}))}else console.log("No cart data found in localStorage, initializing empty cart"),c.set({})}catch(t){console.error("Error loading cart from localStorage:",t),c.set({})}}function v(t){if(typeof window>"u"||typeof localStorage>"u"){console.warn("localStorage not available, cannot save cart");return}try{localStorage.setItem(f,JSON.stringify(t)),console.log("Cart saved to localStorage:",t)}catch(o){console.error("Error saving cart to localStorage:",o)}}c.subscribe(t=>{v(t)});typeof window<"u"&&y();const l=c;function S(t){if(console.log("addItemToCart called with:",t),!t||!t.brand||!t.name||!t.size||!t.price||!t.image)throw console.error("Invalid item data:",t),new Error("Data item tidak lengkap");const o=`${t.brand}-${t.size}`,e=l.get(),n=e[o],r={...e};n&&typeof n=="object"&&n.quantity?(r[o]={...n,quantity:n.quantity+1},console.log("Updated existing item:",r[o])):(r[o]={...t,id:o,quantity:1},console.log("Added new item:",r[o])),l.set(r),console.log("Current cart items:",l.get())}function b(t){console.log("Removing item with ID:",t);const e={...l.get()};e[t]?(delete e[t],l.set(e),console.log("Item removed successfully")):console.warn("Item not found in cart:",t)}function m(t,o){if(console.log("Updating quantity for item:",t,"to:",o),o<=0){b(t);return}const e=l.get(),n=e[t];if(n&&typeof n=="object"){const r={...e};r[t]={...n,quantity:o},l.set(r),console.log("Quantity updated:",r[t])}else console.warn("Item not found when updating quantity:",t)}function w(){const t=l.get();return Object.values(t).reduce((o,e)=>typeof e=="object"&&e!==null&&typeof e.price=="number"&&typeof e.quantity=="number"?o+e.price*e.quantity:o,0)}function C(){console.log("Clearing cart"),l.set({})}function I(){const t=l.get();console.log("Getting cart items array from:",t);const o=Object.values(t).filter(e=>{const n=typeof e=="object"&&e!==null&&typeof e.id=="string"&&typeof e.brand=="string"&&typeof e.name=="string"&&typeof e.size=="number"&&typeof e.price=="number"&&typeof e.image=="string"&&typeof e.quantity=="number"&&e.quantity>0;return n||console.warn("Invalid item found:",e),n});return console.log("Filtered items array:",o),o}export{l as a,I as b,C as c,S as d,w as g,b as r,m as u};
